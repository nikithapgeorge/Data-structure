#include <stdio.h>
#include <stdlib.h>

// Node structure
struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

// Function to insert a new node at the beginning of the doubly circular linked list
void insert(struct Node** head, int data) {
    // Create a new node
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;

    // If the list is empty
    if (*head == NULL) {
        newNode->prev = newNode;
        newNode->next = newNode;
        *head = newNode;
    }
    else {
        // Find the last node
        struct Node* last = (*head)->prev;

        // Insert the new node at the beginning
        newNode->prev = last;
        newNode->next = *head;
        (*head)->prev = newNode;
        last->next = newNode;
        *head = newNode;
    }
}

// Function to display the doubly circular linked list in forward direction
void displayForward(struct Node* head) {
    struct Node* temp = head;

    if (head != NULL) {
        do {
            printf("%d ", temp->data);
            temp = temp->next;
        } while (temp != head);
    }

    printf("\n");
}

// Function to display the doubly circular linked list in backward direction
void displayBackward(struct Node* head) {
    struct Node* temp = head;

    if (head != NULL) {
        do {
            printf("%d ", temp->data);
            temp = temp->prev;
        } while (temp != head);
    }

    printf("\n");
}

int main() {
    struct Node* head = NULL;

    // Insert nodes in the doubly circular linked list
    insert(&head, 4);
    insert(&head, 3);
    insert(&head, 2);
    insert(&head, 1);

    // Display the doubly circular linked list in forward direction
    printf("Doubly Circular Linked List (Forward): ");
    displayForward(head);

    // Display the doubly circular linked list in backward direction
    printf("Doubly Circular Linked List (Backward): ");
    displayBackward(head);

    return 0;
}
